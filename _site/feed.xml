<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-08-26T09:37:43+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">blog</title><subtitle>Built with Jekyll and love üß°</subtitle><entry><title type="html">Golang HTTP service best practices</title><link href="http://localhost:4000/go/2022/06/01/Go-HTTP-service-best-practices.html" rel="alternate" type="text/html" title="Golang HTTP service best practices" /><published>2022-06-01T20:55:48+03:00</published><updated>2022-06-01T20:55:48+03:00</updated><id>http://localhost:4000/go/2022/06/01/Go-HTTP-service-best-practices</id><content type="html" xml:base="http://localhost:4000/go/2022/06/01/Go-HTTP-service-best-practices.html"><![CDATA[<h1 id="hi-gopher">Hi, gopher!</h1>

<p>It is hard to write a perfect Golang service on the first try. You always face some requirements you‚Äôve missed and try to make the service more convenient. So here are <strong>my own</strong> best practices on <em>‚ÄúHow to write a cool Go HTTP service‚Äù</em>. I want to document it once and never think of it anymore (because devs are <em>lazy</em> by definition).</p>

<h1 id="project-structure">Project structure</h1>

<p>Imagine we need to develop a service that will handle 1-2 HTTP requests and do some logic on them. The main idea is - not to mix <em>business logic</em> with <em>serving</em>. Serving must handle interactions with the environment, and business logic is for your business.</p>

<p>So, I like having this structure:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚îú‚îÄ‚îÄ main.go
‚îú‚îÄ‚îÄ config
‚îÇ   ‚îî‚îÄ‚îÄ config.go
‚îú‚îÄ‚îÄ server
‚îÇ   ‚îî‚îÄ‚îÄ server.go
‚îî‚îÄ‚îÄ internal
   ‚îî‚îÄ‚îÄ ...
</code></pre></div></div>

<ul>
  <li><strong>main.go</strong> - is for your app entry point. Here we do initialization, start HTTP server, read configs and apply them, and handle interrupts.</li>
  <li><strong>config</strong> - is for config structures.</li>
  <li><strong>server</strong> - is for the HTTP serving stuff. We might want to change the server implementation or add some cool settings or features (like proxies). I should never touch the application logic.</li>
  <li><strong>internal</strong> - the business logic of the app.</li>
</ul>

<p>There are approaches with <strong>api</strong> folder and many others, but for 1-2 HTTP requests, we don‚Äôt need a considerable API, right?</p>

<p>The main idea is:</p>

<blockquote>
  <p>Separated things are easier to maintain.</p>
</blockquote>

<h1 id="avoid-init">Avoid init()</h1>

<p>I don‚Äôt like implicit things in web services. It is convenient sometimes, but it is simpler to write an extra function call inside <code class="language-plaintext highlighter-rouge">main()</code> and test it accordingly.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">init()</code> can make things more difficult.</p>
</blockquote>

<h1 id="keep-server-logic-separated">Keep server logic separated</h1>

<p>The server. You can easily extend it without making it hard to read and maintain. Better see an example:</p>

<p><strong>server/server.go</strong></p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">server</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"context"</span>

    <span class="s">"github.com/mrexox/project/config"</span>

    <span class="c">// ...</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Server</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="c">// some important stuff</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewServer</span><span class="p">(</span><span class="n">cfg</span> <span class="o">*</span><span class="n">config</span><span class="o">.</span><span class="n">Config</span><span class="p">)</span> <span class="o">*</span><span class="n">Server</span> <span class="p">{</span>
    <span class="c">// initialization</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">Server</span><span class="p">{</span>
        <span class="c">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Server</span><span class="p">)</span> <span class="n">Start</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// start the HTTP server</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Server</span><span class="p">)</span> <span class="n">Shutdown</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Gracefully shutdown with the context</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>main.go</strong></p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
   <span class="s">"github.com/mrexox/project/config"</span>
   <span class="s">"github.com/mrexox/project/server"</span>

   <span class="c">// ...</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cfg</span> <span class="o">:=</span> <span class="n">config</span><span class="o">.</span><span class="n">NewConfig</span><span class="p">()</span>
    <span class="n">srv</span> <span class="o">:=</span> <span class="n">server</span><span class="o">.</span><span class="n">NewServer</span><span class="p">(</span><span class="n">cfg</span><span class="p">)</span>
    <span class="c">// Add handlers...</span>
    <span class="c">// Handle shutdown...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The main idea is:</p>

<blockquote>
  <p>Keep the server implementation and business logic separated.</p>
</blockquote>

<h1 id="handle-sigint-and-sigterm">Handle SIGINT and SIGTERM</h1>

<p>Just handling the first Ctrl-C as <strong>Stop gracefully, please!</strong> and the second Ctrl-C as <strong>Stop it right now!</strong>.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// This is our force shutdown context</span>
    <span class="n">ctx</span><span class="p">,</span> <span class="n">forceShutdown</span> <span class="o">:=</span> <span class="n">context</span><span class="o">.</span><span class="n">WithCancel</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">())</span>

    <span class="c">// ...</span>

    <span class="n">srv</span><span class="o">.</span><span class="n">Start</span><span class="p">()</span> <span class="c">// should use goroutine by the way</span>

    <span class="n">signalChan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">os</span><span class="o">.</span><span class="n">Signal</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
    <span class="n">signal</span><span class="o">.</span><span class="n">Notify</span><span class="p">(</span><span class="n">signalChan</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">syscall</span><span class="o">.</span><span class="n">SIGTERM</span><span class="p">)</span>

    <span class="o">&lt;-</span><span class="n">signalChan</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"shutting down..."</span><span class="p">)</span>

    <span class="c">// Force shutdown on second signal</span>
    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
    <span class="o">&lt;-</span><span class="n">signalChan</span>
    <span class="n">forceShutdown</span><span class="p">()</span>
    <span class="p">}()</span>

    <span class="c">// If we use forceShutdown the server must shut down imediately</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">srv</span><span class="o">.</span><span class="n">Shutdown</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="s">"shutdown error"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">log</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"successful shutdown"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The main idea is:</p>

<blockquote>
  <p>Make the app shutdownable. It will be useful for any infrastructure you deploy it to - especially Kubernetes.</p>
</blockquote>

<h1 id="write-tests">Write tests!</h1>

<p>Yes, this is the most important best practice of mine! Tests allow you to make sure you are not breaking the whole system by touching one thing. They say the <strong>coverage of 70% is enough</strong>, but I like it to be <strong>90%</strong> or around.</p>

<p>The main idea is:</p>

<blockquote>
  <p>Tests are helping you control the changes. You sleep well when you have them.</p>
</blockquote>

<h1 id="go-is-fun">Go is fun!</h1>

<p>There is an example of using these best practices here: <a href="https://github.com/mrexox/asyncproxy">asyncproxy</a>. <strong>Asyncproxy</strong> is a service for balancing the load by storing request bodies in a database and proxying them asynchronously. I had much fun writing it. And this is because, you know, using Go is fun!</p>]]></content><author><name></name></author><category term="go" /><summary type="html"><![CDATA[Hi, gopher!]]></summary></entry><entry><title type="html">üë∂ Linux basic kernel module</title><link href="http://localhost:4000/driver/2020/06/21/Linux-basic-kernel-module.html" rel="alternate" type="text/html" title="üë∂ Linux basic kernel module" /><published>2020-06-21T12:57:45+03:00</published><updated>2020-06-21T12:57:45+03:00</updated><id>http://localhost:4000/driver/2020/06/21/Linux-basic-kernel-module</id><content type="html" xml:base="http://localhost:4000/driver/2020/06/21/Linux-basic-kernel-module.html"><![CDATA[<h1 id="hi-developer">Hi, developer</h1>

<p>This it an article about how to write a basic <code class="language-plaintext highlighter-rouge">hello_world</code> linux module for 4.19 kernel.</p>

<h1 id="environment">Environment</h1>

<p>I use Gentoo Linux on Intel Celeron machine:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uname -a
Linux gentoo 4.19.97-gentoo #5 SMP Tue Mar 31 19:57:47 -00 2020 x86_64 Intel(R) Celeron(R) CPU N2830 @ 2.16GHz GenuineIntel GNU/Linux
</code></pre></div></div>

<p>Of course you need kernel sources! On Gentoo they are at <em>/usr/src/linux</em>, on other systems you should install them via package manager or via <a href="https://github.com/torvalds/linux">git</a>. Google will help you!</p>

<h1 id="code">Code</h1>

<p>You can browse the sources also <a href="https://github.com/mrexox/mrexox.github.io/tree/hello-world-linux-module">here</a></p>

<p><strong>hello-world.c</strong></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;linux/init.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;linux/module.h&gt;</span><span class="cp">
</span>
<span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">"Dual BSD/GPL"</span><span class="p">);</span> <span class="cm">/* MODULE_LICENSE is a required macro */</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">hello_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="cm">/* This will print to tty0 and /var/log/kern.log */</span>
  <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ALERT</span> <span class="s">"Hello, world!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="nf">hello_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">printk</span><span class="p">(</span><span class="n">KERN_ALERT</span> <span class="s">"Goodbye, man!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/*
 * Every module has its initialize and exit function.
 * This is how they are registered.
 */</span>
<span class="n">module_init</span><span class="p">(</span><span class="n">hello_init</span><span class="p">);</span>
<span class="n">module_exit</span><span class="p">(</span><span class="n">hello_exit</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>Makefile</strong></p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">KERNELDIR</span> <span class="o">?=</span> /lib/modules/<span class="nf">$(</span><span class="nb">shell</span> <span class="nb">uname</span> <span class="nt">-r</span><span class="nf">)</span>/build

<span class="nl">default</span><span class="o">:</span>
	<span class="nv">$(MAKE)</span> <span class="nt">-C</span> <span class="nv">$(KERNELDIR)</span> <span class="nv">M</span><span class="o">=</span><span class="nv">$(CURDIR)</span> modules

<span class="nl">clean</span><span class="o">:</span>
	<span class="nb">rm</span> <span class="nt">-rf</span> <span class="k">*</span>.o <span class="k">*</span>~ core .depend .<span class="k">*</span>.cmd <span class="k">*</span>.ko <span class="k">*</span>.mod.c .tmp_versions <span class="k">*</span>.symvers modules.order
</code></pre></div></div>

<p><strong>Kbuild</strong></p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">obj-m</span> <span class="o">+=</span> hello-world.o
</code></pre></div></div>

<h1 id="explanation">Explanation</h1>

<h2 id="writing-c-file">Writing C file</h2>

<p>Every Linux kernel module must have following things:</p>

<ul>
  <li>License</li>
  <li>Intitialization function</li>
  <li>Exit function</li>
</ul>

<h3 id="license">License</h3>

<p><code class="language-plaintext highlighter-rouge">MODULE_LICENSE</code> is used to declare the license. These values can be used for my kernel version:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">"GPL"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"GPL v2"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"GPL and additional rights"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"Dual BSD/GPL"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"Dual MIT/GPL"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"Dual MPL/GPL"</code></li>
  <li><code class="language-plaintext highlighter-rouge">"Proprietary"</code></li>
</ul>

<p>For more information see <a href="https://github.com/torvalds/linux/blob/master/include/linux/module.h">include/linux/module.h</a> file.</p>

<h3 id="initialization">Initialization</h3>

<p><code class="language-plaintext highlighter-rouge">module_init</code> is a macro that declares initialization function (for our case it is <code class="language-plaintext highlighter-rouge">hello_init</code>). This function is called when the module is inserted to a kernelspace. e.g. on running <code class="language-plaintext highlighter-rouge">insmod</code> command.</p>

<h3 id="exiting">Exiting</h3>

<p><code class="language-plaintext highlighter-rouge">module_exit</code> is a macro that declares exiting function (<code class="language-plaintext highlighter-rouge">hello_exit</code>). This function is called when the module is removed from the kernelspace. e.g. on running <code class="language-plaintext highlighter-rouge">rmmod</code> command.</p>

<h2 id="writing-makefile">Writing Makefile</h2>

<p>For this simple purpose (as we do not have any dependencies) we just need to run <code class="language-plaintext highlighter-rouge">make module</code> in kernel sources with ENV var <code class="language-plaintext highlighter-rouge">M</code> set on current working directory. The only thing that I notices while trying to port <a href="https://github.com/martinezjavier/ldd3">ldd3 examples</a> was: you should add <code class="language-plaintext highlighter-rouge">obj-m += ...</code> statement to <strong>Kbuild</strong> file, not to Makefile :warning: Without this I got an error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ make
make -C /lib/modules/4.19.97-gentoo/build M=/home/ian/src/linux-modules/hello-world modules
make[1]: Entering directory '/usr/src/linux-4.19.97-gentoo'
  CC [M]  /home/ian/src/linux-modules/hello-world/hello-world.o
  Building modules, stage 2.
  MODPOST 1 modules
WARNING: modpost: missing MODULE_LICENSE() in /home/ian/src/linux-modules/hello-world/hello-world.o
see include/linux/module.h for more information
  CC      /home/ian/src/linux-modules/hello-world/hello-world.mod.o
  LD [M]  /home/ian/src/linux-modules/hello-world/hello-world.ko
make[1]: Leaving directory '/usr/src/linux-4.19.97-gentoo'
</code></pre></div></div>

<p>See this warning? Module does not work properly when compiled with this warning. Moving <code class="language-plaintext highlighter-rouge">obj-m += ...</code> to <strong>Kbuild</strong> helped to solve that.</p>

<h2 id="running-module">Running module</h2>

<p>To run the module and make sure it runs, you need to do the following:</p>

<ol>
  <li>Insert the module (as root)</li>
  <li>Watch the message on <code class="language-plaintext highlighter-rouge">dmesg</code> or tail <strong>/var/log/kern.log</strong> file</li>
  <li>List modes, notice it runs</li>
  <li>Remove the module (as root)</li>
  <li>Watch the message again!</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># insmod hello-world.ko
$ lsmod | grep hello_world # notice! dashes changed to undescrores here
hello_world            16384  0
$ tail -1 /var/log/kern.log
Jun 21 14:07:53 gentoo kernel: [10063.468659] Hello, world!
# rmmod hello_world
$ tail -1 /var/log/kern.log
Jun 21 14:10:14 gentoo kernel: [10202.723209] Goodbye, man!
</code></pre></div></div>

<p>Here we go! Hello world module is done.</p>

<h2 id="here-is-the-list-of-useful-links">Here is the list of useful links:</h2>

<ul>
  <li><a href="https://github.com/martinezjavier/ldd3">GitHub: LDD3 examples</a> (of course you know what ldd mean!)</li>
  <li><a href="https://github.com/torvalds/linux">GitHub: Linux repository</a></li>
  <li><a href="https://www.youtube.com/watch?v=juGNPLdjLH4">YouTube: How Linux Kernel Drivers Work</a></li>
  <li><a href="https://tldp.org/LDP/lkmpg/2.6/html/x121.html">Hello World tutorial 1</a></li>
  <li><a href="https://blog.sourcerer.io/writing-a-simple-linux-kernel-module-d9dc3762c234">Hello World tutorial 2</a></li>
  <li><a href="https://www.geeksforgeeks.org/linux-kernel-module-programming-hello-world-program/">Hello World tutorial 3</a></li>
</ul>]]></content><author><name></name></author><category term="driver" /><summary type="html"><![CDATA[Hi, developer]]></summary></entry><entry><title type="html">Evesync: package synchronization tool</title><link href="http://localhost:4000/clusterization/2019/06/20/Evesync.html" rel="alternate" type="text/html" title="Evesync: package synchronization tool" /><published>2019-06-20T12:32:43+03:00</published><updated>2019-06-20T12:32:43+03:00</updated><id>http://localhost:4000/clusterization/2019/06/20/Evesync</id><content type="html" xml:base="http://localhost:4000/clusterization/2019/06/20/Evesync.html"><![CDATA[<h1 id="hi-admin">Hi, Admin!</h1>

<p>There are a bunch of problems when deploying some code on multiple servers in one local network. It usually needs to be automized. While switching berween <em>cron</em> and <em>ansible</em> there‚Äôs a solution that is aimed to do all the job. It‚Äôs name is <em>evesync</em>. It is now a ruby gem that allows to synchronize files and packages (<code class="language-plaintext highlighter-rouge">deb</code> and <code class="language-plaintext highlighter-rouge">rpm</code>) between multiple nodes.</p>

<p>Please, keep in mind, the project is in development stage and some things are not implemented now.</p>

<h2 id="evesync">EVESYNC</h2>

<p>It‚Äôs a simple tool to automate packages and files update on different hosts, connected to one network. You need to configure it, start the daemons, and update some of the watched objects. See the <a href="https://github.com/mrexox/evesync">github page</a> README file for more information and contact me if you are interested:</p>

<p><a href="mrexox@yahoo.com">mrexox@yahoo.com</a></p>

<h3 id="installing-evesync">Installing evesync</h3>
<p>Firs of all you need to install dependencies. For Rhel distro run:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># yum install rubygems ruby-devel make gcc
</code></pre></div></div>

<p>For Debian-based distro run:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># apt-get install rubygems ruby-dev make gcc
</code></pre></div></div>

<p>Evesync is available on <a href="https://rubygems.org/gems/evesync">rubygems.org</a>, so it can be installed with a command:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># gem install evesync
</code></pre></div></div>

<h3 id="running-evesync">Running evesync</h3>

<p>To start evesync you need to be root or make your user an owner of following directories:</p>
<ul>
  <li>/var/run/evesync</li>
  <li>/var/log/evesync</li>
  <li>/var/lib/evesync</li>
</ul>

<p>Non-root users will not be able to install packages. Thus running as root is recommended.</p>

<p>To start all daemons, go:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># evesync --run
</code></pre></div></div>

<p>To stop daemons, go:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># evesync --kill
</code></pre></div></div>

<h3 id="adding-systemd-service">Adding Systemd service</h3>

<p>To make evesync a systemd service, you need to install it globally with a command</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># gem install --no-user-install evesync
</code></pre></div></div>

<p>Then create a file <strong>/usr/lib/systemd/system/evesync.service</strong> with following content <a href="https://github.com/mrexox/evesync/blob/master/systemd/evesync.service">(or use this file from Github)</a>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=Evesync daemons
Documentation=Starting all evesync daemons. Logs can be found in /var/log/evesync.
After=network.target

[Service]
Type=forking
ExecStart=/usr/bin/evesync --run
ExecStop=/usr/bin/evesync --kill
PIDFile=/var/run/evesync/evemond.pid

[Install]
WantedBy=multi-user.target
</code></pre></div></div>

<p>Then just enable and start the service:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># systemctl daemon-reload
# systemctl enable evesync.service
# systemctl start evesync.service
</code></pre></div></div>

<p>Don‚Äôt forget to install gem with <code class="language-plaintext highlighter-rouge">--no-user-install</code> flag, to install it globally!</p>

<h3 id="contributing">Contributing</h3>

<p>See <a href="https://github.com/mrexox/evesync/blob/master/README.md">README.md</a> for running tests and feel free to create issues and write e-mails to mrexox@yahoo.com</p>

<h3 id="upd-from-year-2020">UPD: from year 2020</h3>
<p>This tool is currently not supported, but if you are interested, contact me with your question.</p>]]></content><author><name></name></author><category term="clusterization" /><summary type="html"><![CDATA[Hi, Admin!]]></summary></entry></feed>